function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.array.reduce.js";
import { h } from 'vue';
import { start } from '@storybook/core/client';
import './globals';
import render, { storybookApp } from './render';
/*
  This normalizes a functional component into a render method in ComponentOptions.

  The concept is taken from Vue 3's `defineComponent` but changed from creating a `setup`
  method on the ComponentOptions so end-users don't need to specify a "thunk" as a decorator.
 */

function normalizeFunctionalComponent(options) {
  return typeof options === 'function' ? {
    render: options,
    name: options.name
  } : options;
}

function prepare(rawStory, innerStory) {
  const story = rawStory;

  if (story == null) {
    return null;
  }

  if (innerStory) {
    return Object.assign({}, normalizeFunctionalComponent(story), {
      components: Object.assign({}, story.components || {}, {
        story: innerStory
      })
    });
  }

  return {
    render() {
      return h(story);
    }

  };
}

const defaultContext = {
  id: 'unspecified',
  name: 'unspecified',
  kind: 'unspecified',
  parameters: {},
  args: {},
  argTypes: {},
  globals: {}
};

function decorateStory(storyFn, decorators) {
  return decorators.reduce((decorated, decorator) => (context = defaultContext) => {
    let story;
    const decoratedStory = decorator((_ref = {}) => {
      let innerContext = _objectWithoutPropertiesLoose(_ref, ["parameters"]);

      story = decorated(Object.assign({}, context, innerContext));
      return story;
    }, context);

    if (!story) {
      story = decorated(context);
    }

    if (decoratedStory === story) {
      return story;
    }

    return prepare(decoratedStory, story);
  }, context => prepare(storyFn(context)));
}

const framework = 'vue3';
const api = start(render, {
  decorateStory
});
export const storiesOf = (kind, m) => {
  return api.clientApi.storiesOf(kind, m).addParameters({
    framework
  });
};
export const configure = (...args) => api.configure(framework, ...args);
export const {
  addDecorator
} = api.clientApi;
export const {
  addParameters
} = api.clientApi;
export const {
  clearDecorators
} = api.clientApi;
export const {
  setAddon
} = api.clientApi;
export const {
  forceReRender
} = api;
export const {
  getStorybook
} = api.clientApi;
export const {
  raw
} = api.clientApi;
export const app = storybookApp;