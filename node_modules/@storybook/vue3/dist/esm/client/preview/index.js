function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import { h } from 'vue';
import { start } from '@storybook/core/client';
import './globals';
import render, { storybookApp } from './render';
/*
  This normalizes a functional component into a render method in ComponentOptions.

  The concept is taken from Vue 3's `defineComponent` but changed from creating a `setup`
  method on the ComponentOptions so end-users don't need to specify a "thunk" as a decorator.
 */

function normalizeFunctionalComponent(options) {
  return typeof options === 'function' ? {
    render: options,
    name: options.name
  } : options;
}

function prepare(rawStory, innerStory) {
  var story = rawStory;

  if (story == null) {
    return null;
  }

  if (innerStory) {
    return Object.assign({}, normalizeFunctionalComponent(story), {
      components: Object.assign({}, story.components || {}, {
        story: innerStory
      })
    });
  }

  return {
    render: function render() {
      return h(story);
    }
  };
}

var defaultContext = {
  id: 'unspecified',
  name: 'unspecified',
  kind: 'unspecified',
  parameters: {},
  args: {},
  argTypes: {},
  globals: {}
};

function decorateStory(storyFn, decorators) {
  return decorators.reduce(function (decorated, decorator) {
    return function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultContext;
      var story;
      var decoratedStory = decorator(function () {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var parameters = _ref.parameters,
            innerContext = _objectWithoutProperties(_ref, ["parameters"]);

        story = decorated(Object.assign({}, context, innerContext));
        return story;
      }, context);

      if (!story) {
        story = decorated(context);
      }

      if (decoratedStory === story) {
        return story;
      }

      return prepare(decoratedStory, story);
    };
  }, function (context) {
    return prepare(storyFn(context));
  });
}

var framework = 'vue3';
var api = start(render, {
  decorateStory: decorateStory
});
export var storiesOf = function storiesOf(kind, m) {
  return api.clientApi.storiesOf(kind, m).addParameters({
    framework: framework
  });
};
export var configure = function configure() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return api.configure.apply(api, [framework].concat(args));
};
var addDecorator = api.clientApi.addDecorator;
export { addDecorator };
var addParameters = api.clientApi.addParameters;
export { addParameters };
var clearDecorators = api.clientApi.clearDecorators;
export { clearDecorators };
var setAddon = api.clientApi.setAddon;
export { setAddon };
var forceReRender = api.forceReRender;
export { forceReRender };
var getStorybook = api.clientApi.getStorybook;
export { getStorybook };
var raw = api.clientApi.raw;
export { raw };
export var app = storybookApp;