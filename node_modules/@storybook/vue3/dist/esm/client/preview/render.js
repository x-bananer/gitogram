var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.object.freeze.js";
import dedent from 'ts-dedent';
import { createApp, h, shallowRef } from 'vue';
var activeStoryComponent = shallowRef(null);
var root = null;
export var storybookApp = createApp({
  // If an end-user calls `unmount` on the app, we need to clear our root variable
  unmounted: function unmounted() {
    root = null;
  },
  setup: function setup() {
    return function () {
      if (!activeStoryComponent.value) throw new Error('No Vue 3 Story available. Was it set correctly?');
      return h(activeStoryComponent.value);
    };
  }
});
export default function render(_ref) {
  var storyFn = _ref.storyFn,
      kind = _ref.kind,
      name = _ref.name,
      args = _ref.args,
      showMain = _ref.showMain,
      showError = _ref.showError,
      showException = _ref.showException,
      forceRender = _ref.forceRender;
  storybookApp.config.errorHandler = showException;
  var element = storyFn();

  if (!element) {
    showError({
      title: "Expecting a Vue component from the story: \"".concat(name, "\" of \"").concat(kind, "\"."),
      description: dedent(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        Did you forget to return the Vue component from the story?\n        Use \"() => ({ template: '<my-comp></my-comp>' })\" or \"() => ({ components: MyComp, template: '<my-comp></my-comp>' })\" when defining the story.\n      "])))
    });
    return;
  }

  showMain();
  activeStoryComponent.value = element;

  if (!root) {
    root = storybookApp.mount('#root');
  }
}