{"remainingRequest":"/Users/xeniya/Desktop/gitogram/node_modules/thread-loader/dist/cjs.js!/Users/xeniya/Desktop/gitogram/node_modules/babel-loader/lib/index.js!/Users/xeniya/Desktop/gitogram/node_modules/eslint-loader/index.js??ref--13-0!/Users/xeniya/Desktop/gitogram/src/store/index.js","dependencies":[{"path":"/Users/xeniya/Desktop/gitogram/src/store/index.js","mtime":1642488971872},{"path":"/Users/xeniya/Desktop/gitogram/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xeniya/Desktop/gitogram/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xeniya/Desktop/gitogram/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/xeniya/Desktop/gitogram/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xeniya/Desktop/gitogram/src/store/index.js"],"names":["createStore","api","state","data","likedOfMe","user","userRepos","mutations","SET_USER","SET_USER_REPOS","SET_ISSUES","issues","map","item","id","idOwner","issuesList","i","length","push","nick","login","comment","title","SET_TRENDINGS","trendings","following","status","loading","error","SET_STARRED","starred","SET_README","payload","repo","readme","content","SET_FOLLOWING","SET_FOLLOWING_STARRED","getters","getRepoById","find","getRepoByIdStarred","getUnstarredOnly","filter","trendingsRepo","some","starredRepo","actions","logout","localStorage","removeItem","window","location","reload","fetchUser","commit","rootState","getUser","console","log","fetchUserRepos","getUserRepos","fetchIssue","owner","issue","getIssue","fetchTrendings","getTrendings","items","fetchLikedOfMe","getStarredRepos","fetchReadme","curRepo","undefined","getReadme","starRepo","name","unStarRepo","unStarStarred","starStarred"],"mappings":"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":["import { createStore } from 'vuex'\nimport * as api from '../api'\n\nexport default createStore({\n  state: {\n    data: [],\n    likedOfMe: [],\n    user: {},\n    userRepos: []\n  },\n  mutations: {\n    SET_USER: (state, user) => {\n      state.user = user\n    },\n    SET_USER_REPOS: (state, userRepos) => {\n      state.userRepos = userRepos\n    },\n    SET_ISSUES: (state, issues) => {\n      state.likedOfMe = state.likedOfMe.map((item) => {\n        if (item.id === issues.idOwner) {\n          item.issuesList = []\n          for (let i = 0; i < issues.length; i++) {\n            item.issuesList.push({\n              nick: issues[i].user.login,\n              comment: issues[i].title\n            })\n          }\n        }\n        return item\n      })\n    },\n    SET_TRENDINGS: (state, trendings) => {\n      state.data = trendings.map((item) => {\n        item.following = {\n          status: false,\n          loading: false,\n          error: ''\n        }\n        return item\n      })\n    },\n    SET_STARRED: (state, starred) => {\n      state.likedOfMe = starred\n    },\n    SET_README: (state, payload) => {\n      state.data = state.data.map(repo => {\n        if (payload.id === repo.id) {\n          repo.readme = payload.content\n        }\n        return repo\n      })\n    },\n    SET_FOLLOWING: (state, payload) => {\n      state.data = state.data.map((repo) => {\n        if (payload.id === repo.id) {\n          repo.following = {\n            ...repo.following,\n            ...payload.data\n          }\n        }\n        return repo\n      })\n    },\n    SET_FOLLOWING_STARRED: (state, payload) => {\n      state.likedOfMe = state.likedOfMe.map((repo) => {\n        if (payload.id === repo.id) {\n          repo.following = {\n            ...repo.following,\n            ...payload.data\n          }\n        }\n        return repo\n      })\n    }\n  },\n  getters: {\n    getRepoById: (state) => (id) => {\n      return state.data.find(item => item.id === id)\n    },\n    getRepoByIdStarred: (state) => (id) => {\n      return state.likedOfMe.find(item => item.id === id)\n    },\n    getUnstarredOnly (state) {\n      return state.data.filter((trendingsRepo) => {\n        return !state.likedOfMe.some(starredRepo => {\n          return trendingsRepo.id === starredRepo.id\n        })\n      })\n    }\n  },\n  actions: {\n    logout () {\n      localStorage.removeItem('token')\n      window.location.reload()\n    },\n    async fetchUser ({ state, commit, rootState }) {\n      try {\n        const { data } = await api.user.getUser()\n        commit('SET_USER', data)\n      } catch (e) {\n        console.log(e)\n        throw e\n      }\n    },\n    async fetchUserRepos ({ state, commit, rootState }) {\n      try {\n        const { data } = await api.user.getUserRepos()\n        commit('SET_USER_REPOS', data)\n      } catch (e) {\n        console.log(e)\n        throw e\n      }\n    },\n    async fetchIssue ({ state, commit, rootState }, { id, owner, repo }) {\n      try {\n        const { data } = await api.issue.getIssue({ owner, repo })\n        data.idOwner = id\n        commit('SET_ISSUES', data)\n      } catch (e) {\n        console.log(e)\n        throw e\n      }\n    },\n    async fetchTrendings ({ state, commit, rootState }) {\n      try {\n        const { data } = await api.trendings.getTrendings()\n        commit('SET_TRENDINGS', data.items)\n      } catch (e) {\n        console.log(e)\n        throw e\n      }\n    },\n    async fetchLikedOfMe ({ state, commit, rootState }) {\n      try {\n        const { data } = await api.starred.getStarredRepos(10)\n        commit('SET_STARRED', data)\n      } catch (e) {\n        console.log(e)\n        throw e\n      }\n    },\n    async fetchReadme ({ commit }, { id, owner, repo }) {\n      const curRepo = this.getters.getRepoById(id)\n      if (curRepo.readme !== undefined) return\n      try {\n        const { data } = await api.readme.getReadme({ owner, repo })\n        commit('SET_README', { id, content: data })\n      } catch (error) {\n        console.log(error)\n        throw error\n      }\n    },\n    async starRepo ({ commit, getters }, id) {\n      const { name: repo, owner } = getters.getRepoById(id)\n\n      commit('SET_FOLLOWING', {\n        id,\n        data: {\n          status: false,\n          loading: true,\n          error: ''\n        }\n      })\n\n      try {\n        api.starred.starRepo({ owner: owner.login, repo })\n        commit('SET_FOLLOWING', {\n          id,\n          data: {\n            status: true\n          }\n        })\n      } catch (error) {\n        commit('SET_FOLLOWING', {\n          id,\n          data: {\n            status: false,\n            error: 'Error has happened'\n          }\n        })\n      } finally {\n        commit('SET_FOLLOWING', {\n          id,\n          data: {\n            loading: false\n          }\n        })\n      }\n    },\n    async unStarRepo ({ commit, getters }, id) {\n      const { name: repo, owner } = getters.getRepoById(id)\n\n      commit('SET_FOLLOWING', {\n        id,\n        data: {\n          status: true,\n          loading: true,\n          error: ''\n        }\n      })\n\n      try {\n        await api.starred.unStarRepo({ owner: owner.login, repo })\n        commit('SET_FOLLOWING', {\n          id,\n          data: {\n            status: false\n          }\n        })\n      } catch (error) {\n        commit('SET_FOLLOWING', {\n          id,\n          data: {\n            status: true,\n            error: 'Error has happened'\n          }\n        })\n      } finally {\n        commit('SET_FOLLOWING', {\n          id,\n          data: {\n            loading: false\n          }\n        })\n      }\n    },\n    async unStarStarred ({ commit, getters }, id) {\n      const { name: repo, owner } = getters.getRepoByIdStarred(id)\n\n      commit('SET_FOLLOWING_STARRED', {\n        id,\n        data: {\n          status: false,\n          loading: true,\n          error: ''\n        }\n      })\n\n      try {\n        await api.starred.unStarRepo({ owner: owner.login, repo })\n        commit('SET_FOLLOWING_STARRED', {\n          id,\n          data: {\n            status: true\n          }\n        })\n      } catch (error) {\n        commit('SET_FOLLOWING_STARRED', {\n          id,\n          data: {\n            status: false,\n            error: 'Error has happened'\n          }\n        })\n        console.log(error)\n      } finally {\n        commit('SET_FOLLOWING_STARRED', {\n          id,\n          data: {\n            loading: false\n          }\n        })\n      }\n    },\n    async starStarred ({ commit, getters }, id) {\n      const { name: repo, owner } = getters.getRepoByIdStarred(id)\n\n      commit('SET_FOLLOWING_STARRED', {\n        id,\n        data: {\n          status: true,\n          loading: true,\n          error: ''\n        }\n      })\n\n      try {\n        await api.starred.starRepo({ owner: owner.login, repo })\n        commit('SET_FOLLOWING_STARRED', {\n          id,\n          data: {\n            status: false\n          }\n        })\n      } catch (error) {\n        commit('SET_FOLLOWING_STARRED', {\n          id,\n          data: {\n            status: true,\n            error: 'Error has happened'\n          }\n        })\n        console.log(error)\n      } finally {\n        commit('SET_FOLLOWING_STARRED', {\n          id,\n          data: {\n            loading: false\n          }\n        })\n      }\n    }\n  }\n})\n\n// import { createStore } from 'vuex'\n// import * as api from '../api'\n\n// export default createStore({\n//   state: {\n//     data: [],\n//     likedOfMe: [],\n//     user: {},\n//     userRepos: []\n//   },\n//   mutations: {\n//     SET_USER: (state, user) => {\n//       state.user = user\n//     },\n//     SET_USER_REPOS: (state, userRepos) => {\n//       state.userRepos = userRepos\n//     },\n//     SET_ISSUES: (state, issues) => {\n//       state.likedOfMe = state.likedOfMe.map((item) => {\n//         if (item.id === issues.idOwner) {\n//           item.issuesList = []\n//           for (let i = 0; i < issues.length; i++) {\n//             item.issuesList.push({\n//               nick: issues[i].user.login,\n//               comment: issues[i].title\n//             })\n//           }\n//         }\n//         return item\n//       })\n//     },\n//     SET_TRENDINGS: (state, trendings) => {\n//       state.data = trendings.map((item) => {\n//         item.following = {\n//           status: false,\n//           loading: false,\n//           error: ''\n//         }\n//         return item\n//       })\n//     },\n//     SET_STARRED: (state, starred) => {\n//       state.likedOfMe = starred\n//     },\n//     SET_README: (state, payload) => {\n//       state.data = state.data.map(repo => {\n//         if (payload.id === repo.id) {\n//           repo.readme = payload.content\n//         }\n//         return repo\n//       })\n//     },\n//     SET_FOLLOWING: (state, payload) => {\n//       state.data = state.data.map((repo) => {\n//         if (payload.id === repo.id) {\n//           repo.following = {\n//             ...repo.following,\n//             ...payload.data\n//           }\n//         }\n//         return repo\n//       })\n//     },\n//     SET_FOLLOWING_STARRED: (state, payload) => {\n//       state.likedOfMe = state.likedOfMe.map((repo) => {\n//         if (payload.id === repo.id) {\n//           repo.following = {\n//             ...repo.following,\n//             ...payload.data\n//           }\n//         }\n//         return repo\n//       })\n//     }\n//   },\n//   getters: {\n//     getRepoById: (state) => (id) => {\n//       return state.data.find(item => item.id === id)\n//     },\n//     getRepoByIdStarred: (state) => (id) => {\n//       return state.likedOfMe.find(item => item.id === id)\n//     },\n//     getUnstarredOnly (state) {\n//       return state.data.filter((trendingsRepo) => {\n//         return !state.likedOfMe.some(starredRepo => {\n//           return trendingsRepo.id === starredRepo.id\n//         })\n//       })\n//     }\n//   },\n//   actions: {\n//     logout () {\n//       console.log('logoutq')\n//       localStorage.removeItem('token')\n//       window.location.reload()\n//     },\n//     async fetchUser ({ state, commit, rootState }) {\n//       try {\n//         const { data } = await api.user.getUser()\n//         commit('SET_USER', data)\n//       } catch (e) {\n//         console.log(e)\n//         throw e\n//       }\n//     },\n//     async fetchUserRepos ({ state, commit, rootState }) {\n//       try {\n//         const { data } = await api.user.getUserRepos()\n//         commit('SET_USER_REPOS', data)\n//       } catch (e) {\n//         console.log(e)\n//         throw e\n//       }\n//     },\n//     async fetchIssue ({ state, commit, rootState }, { id, owner, repo }) {\n//       try {\n//         const { data } = await api.issue.getIssue({ owner, repo })\n//         data.idOwner = id\n//         commit('SET_ISSUES', data)\n//       } catch (e) {\n//         console.log(e)\n//         throw e\n//       }\n//     },\n//     async fetchTrendings ({ state, commit, rootState }) {\n//       try {\n//         const { data } = await api.trendings.getTrendings()\n//         commit('SET_TRENDINGS', data.items)\n//       } catch (e) {\n//         console.log(e)\n//         throw e\n//       }\n//     },\n//     async fetchLikedOfMe ({ state, commit, rootState }) {\n//       try {\n//         const { data } = await api.starred.getStarredRepos(10)\n//         commit('SET_STARRED', data)\n//       } catch (e) {\n//         console.log(e)\n//         throw e\n//       }\n//     },\n//     async fetchReadme ({ commit }, { id, owner, repo }) {\n//       const curRepo = this.getters.getRepoById(id)\n//       if (curRepo.readme !== undefined) return\n//       try {\n//         const { data } = await api.readme.getReadme({ owner, repo })\n//         commit('SET_README', { id, content: data })\n//       } catch (error) {\n//         console.log(error)\n//         throw error\n//       }\n//     },\n//     async starRepo ({ commit, getters }, id) {\n//       const { name: repo, owner } = getters.getRepoById(id)\n\n//       commit('SET_FOLLOWING', {\n//         id,\n//         data: {\n//           status: false,\n//           loading: true,\n//           error: ''\n//         }\n//       })\n\n//       try {\n//         console.log(owner.login, repo)\n//         api.starred.starRepo({ owner: owner.login, repo })\n//         commit('SET_FOLLOWING', {\n//           id,\n//           data: {\n//             status: true\n//           }\n//         })\n//       } catch (error) {\n//         commit('SET_FOLLOWING', {\n//           id,\n//           data: {\n//             status: false,\n//             error: 'Error has happened'\n//           }\n//         })\n//       } finally {\n//         commit('SET_FOLLOWING', {\n//           id,\n//           data: {\n//             loading: false\n//           }\n//         })\n//       }\n//     },\n//     async unStarRepo ({ commit, getters }, id) {\n//       const { name: repo, owner } = getters.getRepoById(id)\n\n//       commit('SET_FOLLOWING', {\n//         id,\n//         data: {\n//           status: true,\n//           loading: true,\n//           error: ''\n//         }\n//       })\n\n//       try {\n//         console.log('unStar')\n//         await api.starred.unStarRepo({ owner: owner.login, repo })\n//         commit('SET_FOLLOWING', {\n//           id,\n//           data: {\n//             status: false\n//           }\n//         })\n//       } catch (error) {\n//         commit('SET_FOLLOWING', {\n//           id,\n//           data: {\n//             status: true,\n//             error: 'Error has happened'\n//           }\n//         })\n//       } finally {\n//         commit('SET_FOLLOWING', {\n//           id,\n//           data: {\n//             loading: false\n//           }\n//         })\n//       }\n//     },\n//     async unStarStarred ({ commit, getters }, id) {\n//       const { name: repo, owner } = getters.getRepoByIdStarred(id)\n\n//       commit('SET_FOLLOWING_STARRED', {\n//         id,\n//         data: {\n//           status: false,\n//           loading: true,\n//           error: ''\n//         }\n//       })\n\n//       try {\n//         await api.starred.unStarRepo({ owner: owner.login, repo })\n//         commit('SET_FOLLOWING_STARRED', {\n//           id,\n//           data: {\n//             status: true\n//           }\n//         })\n//       } catch (error) {\n//         commit('SET_FOLLOWING_STARRED', {\n//           id,\n//           data: {\n//             status: false,\n//             error: 'Error has happened'\n//           }\n//         })\n//         console.log(error)\n//       } finally {\n//         commit('SET_FOLLOWING_STARRED', {\n//           id,\n//           data: {\n//             loading: false\n//           }\n//         })\n//       }\n//     },\n//     async starStarred ({ commit, getters }, id) {\n//       const { name: repo, owner } = getters.getRepoByIdStarred(id)\n\n//       commit('SET_FOLLOWING_STARRED', {\n//         id,\n//         data: {\n//           status: true,\n//           loading: true,\n//           error: ''\n//         }\n//       })\n\n//       try {\n//         await api.starred.starRepo({ owner: owner.login, repo })\n//         commit('SET_FOLLOWING_STARRED', {\n//           id,\n//           data: {\n//             status: false\n//           }\n//         })\n//       } catch (error) {\n//         commit('SET_FOLLOWING_STARRED', {\n//           id,\n//           data: {\n//             status: true,\n//             error: 'Error has happened'\n//           }\n//         })\n//         console.log(error)\n//       } finally {\n//         commit('SET_FOLLOWING_STARRED', {\n//           id,\n//           data: {\n//             loading: false\n//           }\n//         })\n//       }\n//     }\n//   }\n// })\n"]}]}